datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  delete      Boolean?  @default(false) // Nuevo campo agregado con valor por defecto

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id       String   @id @default(uuid())
  name     String
  url      String

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  delete      Boolean?  @default(false) // Nuevo campo agregado con valor por defecto

  muxData MuxData?

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}


model MuxData {
  id         String   @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String   @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id         String   @id @default(uuid())
  userId     String

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model User {
  id                String   @id @default(uuid())
  email             String   @unique
  fullName          String
  username          String
  phone             String?
  customRole        String
  provider          String
  lastSignInAt      DateTime?
  metadata          Json                           // Datos personalizados por usuario

  isActive          Boolean  @default(true)        // Usuario habilitado o no
  isBanned          Boolean  @default(false)       // Baneado por conducta
  isDeleted         Boolean  @default(false)       // Eliminado lógicamente (soft delete)
  additionalStatus  String   @default("active")    // 'active', 'pending', 'suspended', etc.

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  courses           Course[]
  purchases         Purchase[]
  userProgress      UserProgress[]
  stripeCustomer    StripeCustomer?
  invoices          Invoice[]                      // Relación con facturas

  @@map("users")
}

model Invoice {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  concept   String
  amount    Float
  currency  String
  status    String
  issuedAt  DateTime
  paidAt    DateTime?
  data      Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}


