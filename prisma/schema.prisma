datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Course {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  imageUrl    String?
  price       Float?
  isPublished Boolean  @default(false)
  delete      Boolean? @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id       String   @id @default(uuid())
  name     String
  url      String

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  description String?
  position    Int
  isPublished Boolean  @default(false)
  isFree      Boolean  @default(false)
  delete      Boolean? @default(false)

  video       Video?

  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Video {
  id           String   @id @default(uuid())
  type         VideoType
  url          String?
  assetId      String?
  playbackId   String?
  status       String?
  duration     Float?
  resolution   String?
  aspectRatio  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  chapterId    String   @unique
  chapter      Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

enum VideoType {
  external // puedes conservarlo si quieres algo gen칠rico
  mux
  youtube
  vimeo
}

model UserProgress {
  id         String   @id @default(uuid())
  userId     String

  chapterId String
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id        String   @id @default(uuid())
  userId    String

  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  fullName          String
  username          String
  phone             String?
  customRole        String
  provider          String
  lastSignInAt      DateTime?
  metadata          Json

  isActive          Boolean  @default(true)
  isBanned          Boolean  @default(false)
  isDeleted         Boolean  @default(false)
  additionalStatus  String   @default("active")

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  courses           Course[]
  purchases         Purchase[]
  userProgress      UserProgress[]
  invoices          Invoice[]
  examAttempts      ExamAttempt[]       // 游댢 Campo agregado

  @@map("users")
}


model Invoice {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  concept        String
  amount         Float
  currency       String
  status         String              // e.g. 'pending', 'paid', 'failed', etc.
  paymentMethod  String              // e.g. 'yappy', 'paypal', 'transfer'
  issuedAt       DateTime
  paidAt         DateTime?
  data           Json                // datos adicionales seg칰n m칠todo

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

// ----------------- EXAM TABLE -----------------

model Exam {
  id          String   @id @default(uuid())
  title       String                       // T칤tulo del examen
  description String?                      // Descripci칩n opcional
  duration    Int?                         // Duraci칩n en minutos
  isPublished Boolean  @default(false)     // Si est치 disponible p칰blicamente

  questions   Question[]                   // Preguntas asociadas al examen
  attempts    ExamAttempt[]                // Intentos realizados por usuarios

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id             String   @id @default(uuid())
  examId         String
  exam           Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)

  text           String                        // Texto de la pregunta
  type           QuestionType                  // Tipo de pregunta
  options        Option[]                      // Opciones disponibles (si aplica)
  correctAnswers String[]                      // IDs de opciones correctas (para single o multiple)
  points         Float     @default(1.0)       // Puntos que vale la pregunta

  answers        Answer[]                      // 游댢 Campo inverso agregado

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([examId])
}


model Option {
  id         String   @id @default(uuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  text       String                         // Texto de la opci칩n
  createdAt  DateTime @default(now())
}

model ExamAttempt {
  id          String   @id @default(uuid())
  userId      String
  examId      String

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  exam        Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)

  startedAt   DateTime @default(now())          // Cu치ndo empez칩 el intento
  submittedAt DateTime?                         // Cu치ndo fue enviado (opcional)
  score       Float?                            // Puntuaci칩n total obtenida
  status      String   @default("in_progress")  // Estado del intento

  answers     Answer[]

  @@index([userId, examId])
}

model Answer {
  id               String   @id @default(uuid())
  attemptId        String
  questionId       String

  attempt          ExamAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)

  selectedOptionIds String[]               // IDs de las opciones seleccionadas
  textResponse      String?                // Texto libre si la pregunta es de tipo texto
  isCorrect         Boolean?               // Evaluaci칩n autom치tica o manual

  createdAt         DateTime @default(now())
}

enum QuestionType {
  single      // Una sola respuesta correcta
  multiple    // Varias respuestas correctas
  text        // Respuesta abierta escrita
}
